{"remainingRequest":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/babel-loader/lib/index.js!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/ts-loader/index.js??clonedRuleSet-42.use[2]!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/cache-loader/dist/cjs.js??ruleSet[0].use[0]!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/home/hugo_leguillier/tinygram-2022-2023/front/src/views/Home.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/src/views/Home.vue","mtime":1669404036193},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/babel.config.js","mtime":1668093862815},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/@vue/cli-plugin-typescript/node_modules/cache-loader/dist/cjs.js","mtime":1668093903975},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/babel-loader/lib/index.js","mtime":1668093897906},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/ts-loader/index.js","mtime":1668093913655},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/cache-loader/dist/cjs.js","mtime":1668093903975},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/vue-loader/dist/index.js","mtime":1668093920179}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/cache-loader/dist/cjs.js??ruleSet[0].use[0]!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/home/hugo_leguillier/tinygram-2022-2023/front/src/views/Home.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport Satellite from '@/components/CustomIcon/Satellite.vue';\nimport { defineComponent } from 'vue';\nimport axios from '@/plugins/axios';\nimport { mapActions, mapGetters } from 'vuex';\nimport Observatory from '@/components/CustomIcon/Observatory.vue';\nimport TimelinePost from '@/components/Posts/TimelinePost.vue';\n\nexport default defineComponent({\n  name: 'Home',\n\n  components: {\n    Satellite,\n    TimelinePost,\n    Observatory,\n  },\n\n  data() {\n    return {\n      file: null,\n      description: '',\n      before: '',\n      after: '',\n      posts: [],\n      uploading: false,\n      fetching: false,\n    };\n  },\n\n  async mounted() {\n    if ((this as any).isLoggedIn()) {\n      (this as any).retrieveUser();\n      const data = await (this as any).getPosts('');\n\n      if (data?.items?.length) {\n        (this as any).posts = data.items;\n        (this as any).before = data.previous;\n        (this as any).after = data.next;\n      }\n    } else {\n      (this as any).$router.push('/');\n    }\n\n    (this as any).scrollDetector();\n  },\n\n  computed: {\n    placeholderText() {\n      const followerCount = (this as any).getUser().followers;\n      return `Partagez vos pensées ${\n        followerCount > 0\n          ? 'avec vos ' + followerCount + ' followers' + (followerCount == 1 ? '' : 's') + '!'\n          : 'space!'\n      }`;\n    },\n  },\n\n  methods: {\n    ...mapGetters(['isLoggedIn', 'getUser']),\n    ...mapActions(['retrieveUser']),\n\n    updateFile(e: any) {\n      if (e?.target?.files?.[0]) {\n        (this as any).file = e.target.files[0];\n      } else {\n        (this as any).file = null;\n        (window as any).document.getElementById('fileInput').value = null;\n      }\n    },\n\n    scrollDetector() {\n      window.onscroll = async () => {\n        let bottomOfWindow =\n          Math.ceil(\n            Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop) +\n              window.innerHeight,\n          ) >= document.documentElement.offsetHeight;\n        if (bottomOfWindow && !(this as any).fetching) {\n          (this as any).fetching = true;\n          try {\n            const data = await (this as any).getPosts((this as any)?.after);\n\n            if (data?.items?.length) {\n              // merge (this as any).posts with data.items\n              const existingPostsIds = (this as any).posts.map((post: any) => post.id);\n\n              data.items = data.items.filter((newPost: any) => {\n                return !existingPostsIds.includes(newPost.id);\n              });\n\n              (this as any).posts = [...(this as any).posts, ...data.items];\n              (this as any).before = data.previous;\n              (this as any).after = data.next;\n            }\n\n            (this as any).fetching = false;\n          } catch (e) {\n            (this as any).fetching = false;\n            console.error(e);\n          }\n        }\n      };\n    },\n\n    async getPosts(after: string) {\n      const res = await axios.get(`/timeline${after ? '?after=' + after : ''}`);\n\n      if ((res as any)?.data?.items) {\n        return (res as any)?.data;\n      }\n    },\n\n    async bulkCreatePost(count: number) {\n      (this as any).description = `Post`;\n      const file = (this as any).file;\n\n      if ((this as any).file && (this as any)?.description.length > 0) {\n        for (let i = 0; i < count; i++) {\n          (this as any).description = `Post ${i}`;\n          (this as any).file = file;\n          await (this as any).createPost();\n        }\n      }\n    },\n\n    async createPost() {\n      if ((this as any).file && (this as any)?.description.length > 0) {\n        (this as any).uploading = true;\n        try {\n          const post = await axios.post('/posts', {\n            fileName: (this as any).file.name,\n            fileType: (this as any).file.type,\n            description: (this as any).description,\n          });\n\n          if ((post as any)?.data?.uploadURL) {\n            await fetch((post as any)?.data?.uploadURL, {\n              method: 'PUT', \n              headers: {\n                'Content-Type': (this as any).file.type,               \n              },\n              body: (this as any).file,\n            });\n\n            const publishedPost = await axios.post(`/posts/${(post as any)?.data?.id}/publish`);\n\n            (this as any).description = '';\n            (this as any).updateFile(null);\n\n            const data = await (this as any).getPosts('');\n\n            if (data?.items?.length) {\n              (this as any).posts = data.items;\n              (this as any).before = data.previous;\n              (this as any).after = data.next;\n            }\n\n            (this as any).uploading = false;\n            return publishedPost;\n          }\n        } catch (e) {\n          (this as any).uploading = false;\n          console.error(e);\n          return e;\n        }\n      } else {\n        return null;\n      }\n    },\n  },\n});\n"],"sourceRoot":""}]}