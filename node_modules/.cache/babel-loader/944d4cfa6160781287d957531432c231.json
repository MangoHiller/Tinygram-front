{"remainingRequest":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/thread-loader/dist/cjs.js!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/babel-loader/lib/index.js!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/vuetify/lib/util/color/transformSRGB.mjs","dependencies":[{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/vuetify/lib/util/color/transformSRGB.mjs","mtime":1668093900332},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/babel.config.js","mtime":1668093862815},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":1668093903975},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/thread-loader/dist/cjs.js","mtime":1668093903990},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/babel-loader/lib/index.js","mtime":1668093897906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY2xhbXAgfSBmcm9tICIuLi8uLi91dGlsL2hlbHBlcnMubWpzIjsgLy8gRm9yIGNvbnZlcnRpbmcgWFlaIHRvIHNSR0IKCmNvbnN0IHNyZ2JGb3J3YXJkTWF0cml4ID0gW1szLjI0MDYsIC0xLjUzNzIsIC0wLjQ5ODZdLCBbLTAuOTY4OSwgMS44NzU4LCAwLjA0MTVdLCBbMC4wNTU3LCAtMC4yMDQwLCAxLjA1NzBdXTsgLy8gRm9yd2FyZCBnYW1tYSBhZGp1c3QKCmNvbnN0IHNyZ2JGb3J3YXJkVHJhbnNmb3JtID0gQyA9PiBDIDw9IDAuMDAzMTMwOCA/IEMgKiAxMi45MiA6IDEuMDU1ICogQyAqKiAoMSAvIDIuNCkgLSAwLjA1NTsgLy8gRm9yIGNvbnZlcnRpbmcgc1JHQiB0byBYWVoKCgpjb25zdCBzcmdiUmV2ZXJzZU1hdHJpeCA9IFtbMC40MTI0LCAwLjM1NzYsIDAuMTgwNV0sIFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXSwgWzAuMDE5MywgMC4xMTkyLCAwLjk1MDVdXTsgLy8gUmV2ZXJzZSBnYW1tYSBhZGp1c3QKCmNvbnN0IHNyZ2JSZXZlcnNlVHJhbnNmb3JtID0gQyA9PiBDIDw9IDAuMDQwNDUgPyBDIC8gMTIuOTIgOiAoKEMgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40OwoKZXhwb3J0IGZ1bmN0aW9uIGZyb21YWVooeHl6KSB7CiAgY29uc3QgcmdiID0gQXJyYXkoMyk7CiAgY29uc3QgdHJhbnNmb3JtID0gc3JnYkZvcndhcmRUcmFuc2Zvcm07CiAgY29uc3QgbWF0cml4ID0gc3JnYkZvcndhcmRNYXRyaXg7IC8vIE1hdHJpeCB0cmFuc2Zvcm0sIHRoZW4gZ2FtbWEgYWRqdXN0bWVudAoKICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkgewogICAgcmdiW2ldID0gTWF0aC5yb3VuZChjbGFtcCh0cmFuc2Zvcm0obWF0cml4W2ldWzBdICogeHl6WzBdICsgbWF0cml4W2ldWzFdICogeHl6WzFdICsgbWF0cml4W2ldWzJdICogeHl6WzJdKSkgKiAyNTUpOwogIH0gLy8gUmVzY2FsZSBiYWNrIHRvIFswLCAyNTVdCgoKICByZXR1cm4gKHJnYlswXSA8PCAxNikgKyAocmdiWzFdIDw8IDgpICsgKHJnYlsyXSA8PCAwKTsKfQpleHBvcnQgZnVuY3Rpb24gdG9YWVoocmdiKSB7CiAgY29uc3QgeHl6ID0gWzAsIDAsIDBdOwogIGNvbnN0IHRyYW5zZm9ybSA9IHNyZ2JSZXZlcnNlVHJhbnNmb3JtOwogIGNvbnN0IG1hdHJpeCA9IHNyZ2JSZXZlcnNlTWF0cml4OyAvLyBSZXNjYWxlIGZyb20gWzAsIDI1NV0gdG8gWzAsIDFdIHRoZW4gYWRqdXN0IHNSR0IgZ2FtbWEgdG8gbGluZWFyIFJHQgoKICBjb25zdCByID0gdHJhbnNmb3JtKChyZ2IgPj4gMTYgJiAweGZmKSAvIDI1NSk7CiAgY29uc3QgZyA9IHRyYW5zZm9ybSgocmdiID4+IDggJiAweGZmKSAvIDI1NSk7CiAgY29uc3QgYiA9IHRyYW5zZm9ybSgocmdiID4+IDAgJiAweGZmKSAvIDI1NSk7IC8vIE1hdHJpeCBjb2xvciBzcGFjZSB0cmFuc2Zvcm0KCiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyArK2kpIHsKICAgIHh5eltpXSA9IG1hdHJpeFtpXVswXSAqIHIgKyBtYXRyaXhbaV1bMV0gKiBnICsgbWF0cml4W2ldWzJdICogYjsKICB9CgogIHJldHVybiB4eXo7Cn0="},{"version":3,"sources":["../../../src/util/color/transformSRGB.ts"],"names":["clamp","srgbForwardMatrix","srgbForwardTransform","C","srgbReverseMatrix","srgbReverseTransform","rgb","Array","transform","matrix","i","Math","xyz","r","g","b"],"mappings":"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","sourcesContent":["import type { ColorInt, XYZ } from '../colorUtils'\nimport { clamp } from '../../util/helpers'\n\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]\n\n// Forward gamma adjust\nconst srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)\n\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]\n\n// Reverse gamma adjust\nconst srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)\n\nexport function fromXYZ (xyz: XYZ): ColorInt {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n\n  // Rescale back to [0, 255]\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0)\n}\n\nexport function toXYZ (rgb: ColorInt): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  const r = transform((rgb >> 16 & 0xff) / 255)\n  const g = transform((rgb >> 8 & 0xff) / 255)\n  const b = transform((rgb >> 0 & 0xff) / 255)\n\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n\n  return xyz\n}\n"]}]}