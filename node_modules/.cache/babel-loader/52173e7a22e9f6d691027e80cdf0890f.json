{"remainingRequest":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/thread-loader/dist/cjs.js!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/babel-loader/lib/index.js!/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/vuetify/lib/util/color/APCA.mjs","dependencies":[{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/vuetify/lib/util/color/APCA.mjs","mtime":1668093900332},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/babel.config.js","mtime":1668093862815},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":1668093903975},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/thread-loader/dist/cjs.js","mtime":1668093903990},{"path":"/home/hugo_leguillier/tinygram-2022-2023/front/node_modules/babel-loader/lib/index.js","mtime":1668093897906}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIFdDQUcgMy4wIEFQQ0EgcGVyY2VwdHVhbCBjb250cmFzdCBhbGdvcml0aG0gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTXluZGV4L1NBUEMtQVBDQQogKiBAbGljZW5jZSBodHRwczovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDE1L2NvcHlyaWdodC1zb2Z0d2FyZS1hbmQtZG9jdW1lbnQKICogQHNlZSBodHRwczovL3d3dy53My5vcmcvV0FJL0dML3Rhc2stZm9yY2VzL3NpbHZlci93aWtpL1Zpc3VhbF9Db250cmFzdF9vZl9UZXh0X1N1Ymdyb3VwCiAqLwovLyBNQUdJQ0FMIE5VTUJFUlMKLy8gc1JHQiBDb252ZXJzaW9uIHRvIFJlbGF0aXZlIEx1bWluYW5jZSAoWSkKLy8gVHJhbnNmZXIgQ3VydmUgKGFrYSAiR2FtbWEiKSBmb3Igc1JHQiBsaW5lYXJpemF0aW9uCi8vIFNpbXBsZSBwb3dlciBjdXJ2ZSB2cyBwaWVjZXdpc2UgZGVzY3JpYmVkIGluIGRvY3MKLy8gRXNzZW50aWFsbHksIDIuNCBiZXN0IG1vZGVscyBhY3R1YWwgZGlzcGxheQovLyBjaGFyYWN0ZXJpc3RpY3MgaW4gY29tYmluYXRpb24gd2l0aCB0aGUgdG90YWwgbWV0aG9kCmNvbnN0IG1haW5UUkMgPSAyLjQ7CmNvbnN0IFJjbyA9IDAuMjEyNjcyOTsgLy8gc1JHQiBSZWQgQ29lZmZpY2llbnQgKGZyb20gbWF0cml4KQoKY29uc3QgR2NvID0gMC43MTUxNTIyOyAvLyBzUkdCIEdyZWVuIENvZWZmaWNpZW50IChmcm9tIG1hdHJpeCkKCmNvbnN0IEJjbyA9IDAuMDcyMTc1MDsgLy8gc1JHQiBCbHVlIENvZWZmaWNpZW50IChmcm9tIG1hdHJpeCkKLy8gRm9yIEZpbmRpbmcgUmF3IFNBUEMgQ29udHJhc3QgZnJvbSBSZWxhdGl2ZSBMdW1pbmFuY2UgKFkpCi8vIENvbnN0YW50cyBmb3IgU0FQQyBQb3dlciBDdXJ2ZSBFeHBvbmVudHMKLy8gT25lIHBhaXIgZm9yIG5vcm1hbCB0ZXh0LCBhbmQgb25lIGZvciByZXZlcnNlCi8vIFRoZXNlIGFyZSB0aGUgImJlYXRpbmcgaGVhcnQiIG9mIFNBUEMKCmNvbnN0IG5vcm1CRyA9IDAuNTU7CmNvbnN0IG5vcm1UWFQgPSAwLjU4Owpjb25zdCByZXZUWFQgPSAwLjU3Owpjb25zdCByZXZCRyA9IDAuNjI7IC8vIEZvciBDbGFtcGluZyBhbmQgU2NhbGluZyBWYWx1ZXMKCmNvbnN0IGJsa1RocnMgPSAwLjAzOyAvLyBMZXZlbCB0aGF0IHRyaWdnZXJzIHRoZSBzb2Z0IGJsYWNrIGNsYW1wCgpjb25zdCBibGtDbG1wID0gMS40NTsgLy8gRXhwb25lbnQgZm9yIHRoZSBzb2Z0IGJsYWNrIGNsYW1wIGN1cnZlCgpjb25zdCBkZWx0YVltaW4gPSAwLjAwMDU7IC8vIExpbnQgdHJhcAoKY29uc3Qgc2NhbGVCb1cgPSAxLjI1OyAvLyBTY2FsaW5nIGZvciBkYXJrIHRleHQgb24gbGlnaHQKCmNvbnN0IHNjYWxlV29CID0gMS4yNTsgLy8gU2NhbGluZyBmb3IgbGlnaHQgdGV4dCBvbiBkYXJrCgpjb25zdCBsb0NvblRocmVzaCA9IDAuMDc4OyAvLyBUaHJlc2hvbGQgZm9yIG5ldyBzaW1wbGUgb2Zmc2V0IHNjYWxlCgpjb25zdCBsb0NvbkZhY3RvciA9IDEyLjgyMDUxMjgyMDUxMjgyOyAvLyA9IDEvMC4wNzgsCgpjb25zdCBsb0Nvbk9mZnNldCA9IDAuMDY7IC8vIFRoZSBzaW1wbGUgb2Zmc2V0Cgpjb25zdCBsb0NsaXAgPSAwLjAwMTsgLy8gT3V0cHV0IGNsaXAgKGxpbnQgdHJhcCAjMikKCmV4cG9ydCBmdW5jdGlvbiBBUENBY29udHJhc3QodGV4dCwgYmFja2dyb3VuZCkgewogIC8vIExpbmVhcml6ZSBzUkdCCiAgY29uc3QgUnR4dCA9ICgodGV4dCA+PiAxNiAmIDB4ZmYpIC8gMjU1KSAqKiBtYWluVFJDOwogIGNvbnN0IEd0eHQgPSAoKHRleHQgPj4gOCAmIDB4ZmYpIC8gMjU1KSAqKiBtYWluVFJDOwogIGNvbnN0IEJ0eHQgPSAoKHRleHQgPj4gMCAmIDB4ZmYpIC8gMjU1KSAqKiBtYWluVFJDOwogIGNvbnN0IFJiZyA9ICgoYmFja2dyb3VuZCA+PiAxNiAmIDB4ZmYpIC8gMjU1KSAqKiBtYWluVFJDOwogIGNvbnN0IEdiZyA9ICgoYmFja2dyb3VuZCA+PiA4ICYgMHhmZikgLyAyNTUpICoqIG1haW5UUkM7CiAgY29uc3QgQmJnID0gKChiYWNrZ3JvdW5kID4+IDAgJiAweGZmKSAvIDI1NSkgKiogbWFpblRSQzsgLy8gQXBwbHkgdGhlIHN0YW5kYXJkIGNvZWZmaWNpZW50cyBhbmQgc3VtIHRvIFkKCiAgbGV0IFl0eHQgPSBSdHh0ICogUmNvICsgR3R4dCAqIEdjbyArIEJ0eHQgKiBCY287CiAgbGV0IFliZyA9IFJiZyAqIFJjbyArIEdiZyAqIEdjbyArIEJiZyAqIEJjbzsgLy8gU29mdCBjbGFtcCBZIHdoZW4gbmVhciBibGFjay4KICAvLyBOb3cgY2xhbXBpbmcgYWxsIGNvbG9ycyB0byBwcmV2ZW50IGNyb3Nzb3ZlciBlcnJvcnMKCiAgaWYgKFl0eHQgPD0gYmxrVGhycykgWXR4dCArPSAoYmxrVGhycyAtIFl0eHQpICoqIGJsa0NsbXA7CiAgaWYgKFliZyA8PSBibGtUaHJzKSBZYmcgKz0gKGJsa1RocnMgLSBZYmcpICoqIGJsa0NsbXA7IC8vIFJldHVybiAwIEVhcmx5IGZvciBleHRyZW1lbHkgbG93IOKIhlkgKGxpbnQgdHJhcCAjMSkKCiAgaWYgKE1hdGguYWJzKFliZyAtIFl0eHQpIDwgZGVsdGFZbWluKSByZXR1cm4gMC4wOyAvLyBTQVBDIENPTlRSQVNUCgogIGxldCBvdXRwdXRDb250cmFzdDsgLy8gRm9yIHdlaWdodGVkIGZpbmFsIHZhbHVlcwoKICBpZiAoWWJnID4gWXR4dCkgewogICAgLy8gRm9yIG5vcm1hbCBwb2xhcml0eSwgYmxhY2sgdGV4dCBvbiB3aGl0ZQogICAgLy8gQ2FsY3VsYXRlIHRoZSBTQVBDIGNvbnRyYXN0IHZhbHVlIGFuZCBzY2FsZQogICAgY29uc3QgU0FQQyA9IChZYmcgKiogbm9ybUJHIC0gWXR4dCAqKiBub3JtVFhUKSAqIHNjYWxlQm9XOyAvLyBORVchIFNBUEMgU21vb3RoU2NhbGXihKIKICAgIC8vIExvdyBDb250cmFzdCBTbW9vdGggU2NhbGUgUm9sbG91dCB0byBwcmV2ZW50IHBvbGFyaXR5IHJldmVyc2FsCiAgICAvLyBhbmQgYWxzbyBhIGxvdyBjbGlwIGZvciB2ZXJ5IGxvdyBjb250cmFzdHMgKGxpbnQgdHJhcCAjMikKICAgIC8vIG11Y2ggb2YgdGhpcyBpcyBmb3IgdmVyeSBsb3cgY29udHJhc3RzLCBsZXNzIHRoYW4gMTAKICAgIC8vIHRoZXJlZm9yZSBmb3IgbW9zdCByZXZlcnNpbmcgbmVlZHMsIG9ubHkgbG9Db25PZmZzZXQgaXMgaW1wb3J0YW50CgogICAgb3V0cHV0Q29udHJhc3QgPSBTQVBDIDwgbG9DbGlwID8gMC4wIDogU0FQQyA8IGxvQ29uVGhyZXNoID8gU0FQQyAtIFNBUEMgKiBsb0NvbkZhY3RvciAqIGxvQ29uT2Zmc2V0IDogU0FQQyAtIGxvQ29uT2Zmc2V0OwogIH0gZWxzZSB7CiAgICAvLyBGb3IgcmV2ZXJzZSBwb2xhcml0eSwgbGlnaHQgdGV4dCBvbiBkYXJrCiAgICAvLyBXb0Igc2hvdWxkIGFsd2F5cyByZXR1cm4gbmVnYXRpdmUgdmFsdWUuCiAgICBjb25zdCBTQVBDID0gKFliZyAqKiByZXZCRyAtIFl0eHQgKiogcmV2VFhUKSAqIHNjYWxlV29COwogICAgb3V0cHV0Q29udHJhc3QgPSBTQVBDID4gLWxvQ2xpcCA/IDAuMCA6IFNBUEMgPiAtbG9Db25UaHJlc2ggPyBTQVBDIC0gU0FQQyAqIGxvQ29uRmFjdG9yICogbG9Db25PZmZzZXQgOiBTQVBDICsgbG9Db25PZmZzZXQ7CiAgfQoKICByZXR1cm4gb3V0cHV0Q29udHJhc3QgKiAxMDA7Cn0="},{"version":3,"sources":["../../../src/util/color/APCA.ts"],"names":["mainTRC","Rco","Gco","Bco","normBG","normTXT","revTXT","revBG","blkThrs","blkClmp","deltaYmin","scaleBoW","scaleWoB","loConThresh","loConFactor","loConOffset","loClip","Rtxt","text","Gtxt","Btxt","Rbg","background","Gbg","Bbg","Ytxt","Ybg","Math","SAPC","outputContrast"],"mappings":"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","sourcesContent":["/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nconst mainTRC = 2.4\n\nconst Rco = 0.2126729 // sRGB Red Coefficient (from matrix)\nconst Gco = 0.7151522 // sRGB Green Coefficient (from matrix)\nconst Bco = 0.0721750 // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nconst normBG = 0.55\nconst normTXT = 0.58\nconst revTXT = 0.57\nconst revBG = 0.62\n\n// For Clamping and Scaling Values\n\nconst blkThrs = 0.03 // Level that triggers the soft black clamp\nconst blkClmp = 1.45 // Exponent for the soft black clamp curve\nconst deltaYmin = 0.0005 // Lint trap\nconst scaleBoW = 1.25 // Scaling for dark text on light\nconst scaleWoB = 1.25 // Scaling for light text on dark\nconst loConThresh = 0.078 // Threshold for new simple offset scale\nconst loConFactor = 12.82051282051282 // = 1/0.078,\nconst loConOffset = 0.06 // The simple offset\nconst loClip = 0.001 // Output clip (lint trap #2)\n\nexport function APCAcontrast (text: number, background: number) {\n  // Linearize sRGB\n  const Rtxt = ((text >> 16 & 0xff) / 255) ** mainTRC\n  const Gtxt = ((text >> 8 & 0xff) / 255) ** mainTRC\n  const Btxt = ((text >> 0 & 0xff) / 255) ** mainTRC\n\n  const Rbg = ((background >> 16 & 0xff) / 255) ** mainTRC\n  const Gbg = ((background >> 8 & 0xff) / 255) ** mainTRC\n  const Bbg = ((background >> 0 & 0xff) / 255) ** mainTRC\n\n  // Apply the standard coefficients and sum to Y\n  let Ytxt = (Rtxt * Rco) + (Gtxt * Gco) + (Btxt * Bco)\n  let Ybg = (Rbg * Rco) + (Gbg * Gco) + (Bbg * Bco)\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp\n  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp\n\n  // Return 0 Early for extremely low ∆Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0\n\n  // SAPC CONTRAST\n\n  let outputContrast: number // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    const SAPC = ((Ybg ** normBG) - (Ytxt ** normTXT)) * scaleBoW\n\n    // NEW! SAPC SmoothScale™\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast =\n      (SAPC < loClip) ? 0.0\n      : (SAPC < loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC - loConOffset\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    const SAPC = ((Ybg ** revBG) - (Ytxt ** revTXT)) * scaleWoB\n\n    outputContrast =\n      (SAPC > -loClip) ? 0.0\n      : (SAPC > -loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC + loConOffset\n  }\n\n  return outputContrast * 100\n}\n"]}]}